// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "service-pattern-go/models"

// IPlayerRepository is an autogenerated mock type for the IPlayerRepository type
type IPlayerRepository struct {
	mock.Mock
}

// CreatePlayer provides a mock function with given fields: player
func (_m *IPlayerRepository) CreatePlayer(player models.Player) (bool, error) {
	ret := _m.Called(player)

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.Player) bool); ok {
		r0 = rf(player)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Player) error); ok {
		r1 = rf(player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: id
func (_m *IPlayerRepository) DeletePlayer(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPlayers provides a mock function with given fields:
func (_m *IPlayerRepository) GetAllPlayers() []models.Player {
	ret := _m.Called()

	var r0 []models.Player
	if rf, ok := ret.Get(0).(func() []models.Player); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Player)
		}
	}

	return r0
}

// GetPlayerById provides a mock function with given fields: id
func (_m *IPlayerRepository) GetPlayerById(id int) models.Player {
	ret := _m.Called(id)

	var r0 models.Player
	if rf, ok := ret.Get(0).(func(int) models.Player); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Player)
	}

	return r0
}

// UpdatePlayer provides a mock function with given fields: id, player
func (_m *IPlayerRepository) UpdatePlayer(id int, player models.Player) (bool, error) {
	ret := _m.Called(id, player)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, models.Player) bool); ok {
		r0 = rf(id, player)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, models.Player) error); ok {
		r1 = rf(id, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
